All Servers： 
• 如果 commitIndex > lastApplied：增加 lastApplied，将 log[lastApplied] 应用到状态机（§5.3） 
• 如果 RPC 请求或响应包含 term T > currentTerm：设置 currentTerm = T，转换为 follower（§5.1）

Followers（§5.2)： 
• 响应来自 candidates 和 leaders 的 RPC 
• 如果选举超时而没有收到来自当前 leader 的 AppendEntries RPC 或授予candidate投票：转换为 candidate

Candidates（§5.2）： 
• 转换为 candidate 时，开始选举： 
  • 递增 currentTerm 
  • 为自己投票 
  • 重置选举计时器 
  • 向所有其他服务器发送 RequestVote RPC 
• 如果从大多数服务器收到投票：成为 leader
• 如果从新 leader 收到 AppendEntries RPC：转换为 follower 
• 如果选举超时：开始新的选举

Leaders: 
• 选举时：向每个服务器发送初始的空 AppendEntries RPC（心跳）；在空闲期间重复以防止选举超时（§5.2）
• 如果从客户端收到命令：将 entry 附加到本地 log，在 entry 应用于状态机后做出响应（§5.3） 
• 如果leader的最后一个logIndex ≥ 对于某个follower的nextIndex：发送 AppendEntries RPC 日志条目从 nextIndex 开始
  • 如果成功：为 follower 更新 nextIndex 和 matchIndex（§5.3） 
  • 如果 AppendEntries 由于日志不一致而失败：减少 nextIndex 并重试（§5.3） 
• 如果存在 N 使得 N > commitIndex，则大多数 matchIndex[i] ≥ N，且 log[N].term == currentTerm：设置 commitIndex = N（§5.3，§5.4）


PS:
最好有一个长期运行的独立goroutine来使每个服务器在长时间未收到心跳时一起开始选举
选举超时可以用goroutine定期检查（用time.Sleep和一个小常量）

需要一个单独长时间运行的goroutin来发送在applyCh上按顺序提交的的日志条目（必须是单独的，在applyCh上发送会阻塞）

推进 commitIndex 的代码将需要踢apply goroutine；使用条件可能是最简单的变量（Go 的 sync.Cond）
RPC回复在同一个goroutine中处理（而不是通过channel回复）
RPC处理程序应该忽略旧term的RPC




******
140.82.112.4 github.com

151.101.1.194 github.global.ssl.fastly.net
151.101.65.194 github.global.ssl.fastly.net
151.101.129.194 github.global.ssl.fastly.net
151.101.193.194 github.global.ssl.fastly.net

185.199.108.153 assets-cdn.github.com
185.199.110.153 assets-cdn.github.com
185.199.111.153 assets-cdn.github.com
185.199.109.153 assets-cdn.github.com
******


TODO:
10.21:
(1)如果领导者的任期（包括在其 RPC 中）至少与候选人的当前任期一样大，那么候选人将领导者识别为合法并返回跟随者状态。如果 RPC 中的任期小于候选人的当前任期，则候选人拒绝 RPC 并继续处于候选人状态。
(2)在大多数情况下，只有一个服务器会超时；它赢得了选举，并在任何其他服务器超时之前发出心跳???
(3)Raft 通过无限期重试来处理这些失败；如果崩溃的服务器重新启动，那么 RPC 将成功完成。如果服务器在完成 RPC 之后但在响应之前崩溃，那么它会在重新启动后再次收到相同的 RPC。

10.22:
(1)2A ReElection时，当一个Server重新连接后，在心跳超时转变为候选人时term会莫名变为0 √
(2)2A ReElection时，如果上一个leader被断连后重新连接，其log和term应该已经过时，无法再胜任leader工作 √
(3)2A ReElection时，term最大的leader竟然会显示term过期，转变为Follower！！！
(4)为什么上一个被断连的leader在断连时会收到term过期的消息?
（猜测应该是config的逻辑使得活着的server看不见断连的server,但断连的server能看见其他所有server）

10.23：
(1)2A ReElection时，当上一个leader disconnect后仍重复发送心跳但无法收到任何server的反馈，当重新connect后仍然会是leader状态？
（leader设置了WaitGroup等待所有server收到心跳后再执行下一次心跳发送，这样在disconnect后会一直卡在Wait()处，导致恢复时出错）√
2022.10.23 15:20  !!!TEST 2A AC!!!
(2)


选举安全:一个任期最多只能选出一位领导人。§5.2 √
Leader-only追加:Leader从不覆盖或删除日志中的记录;它只追加新条目。§5.3 √
日志匹配:如果两个日志中包含一个索引和项相同的条目，则该索引下所有的日志都是相同的。§5.3
Leader完整性:如果一个日志条目在给定的术语中提交，那么该条目将出现在所有高编号术语的Leader的日志中。§5.4
状态机安全:如果一个服务器在一个给定的索引上应用了一个日志条目到它的状态机上，那么其他服务器就不会对同一个索引应用一个不同的日志条目。§5.4.3


leader会对没有达到一致的server无限重试AppendEntries √
当大部分server都已经完成log条目的复制，leader会提交该log条目（这也会提交leader的所有先前log条目，包括以前leader创建的条目） √
leader保持跟踪已知要提交的最高index，将其包含在AppendEntries RPC中，以便follower能够相应提交并将其应用 √
follower的冲突log条目将被leader的覆盖 √
当一个leader初次掌权时他将所有follower对应的nextindex初始化为自己的log的最后index的下一个（如果follower与其日志不一致将会返回false） √
每当拒绝后leader会减少与该follower对应的nextindex并重试，直到到达匹配的点
一旦返回true，则表示follower已经删除了冲突条目并添加了新条目，并且在term的剩下时间里会与leader保持一致





LLLL 2XL XL XL XL LLL XL LLLLLL 2XL XL LL XL LML XL XL XL M L
MLM XL XL LL XL XL L